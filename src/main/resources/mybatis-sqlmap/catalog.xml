<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">

<mapper namespace="catalog">

	<!--
	2012-07-31 增加lastOperator、creator by liusan.dyf
	2012-08-31 增加reservedString by liusan.dyf
	2013-03-06 增加authorizationCode by liusan.dyf
	-->
	<insert id="insert" parameterType="Catalog">
		INSERT INTO ${reservedValue}
		(`title`,`code`,`parentId`,`parentPath`,`sortNumber`,`level`,`reservedInt`,`status`,`comment`,`creator`,`lastUpdateTime`,`lastOperator`,`reservedString`,`authorizationCode`)
		VALUES
		(#{title},#{code},0, #{parentPath}, #{sortNumber}, #{level}, #{reservedInt}, #{status}, #{comment},#{creator},now(),#{lastOperator},#{reservedString},#{authorizationCode});
		
		<selectKey resultType="int" order="AFTER" keyProperty="id">
      		select LAST_INSERT_ID() as value
    	</selectKey>
	</insert>

	<delete id="delete" parameterType="Catalog">
		DELETE FROM
		`${reservedValue}` WHERE code like CONCAT(#{code},'%');
	</delete>

	<!--2012-04-10
	2012-07-31增加lastOperator by liusan.dyf
	-->
	<update id="update" parameterType="Catalog">
		update `${reservedValue}`
		set

			<if test="title != null">
	            `title` = #{title} ,
			</if>
			<if test="comment != null">
	            `comment` = #{comment} ,
			</if>
			
			<if test="lastOperator != null">
	            `lastOperator` = #{lastOperator} ,
			</if>
			
			<if test="reservedString != null">
	            `reservedString` = #{reservedString} ,
			</if>
			
			<!---->
			<if test="authorizationCode != null">
	            `authorizationCode` = #{authorizationCode} ,
			</if>			
			
			<!--2012-06-11 by liusan.dyf-->
			<if test="sortNumber != 0">
	           `sortNumber` = #{sortNumber},
			</if>

		`lastUpdateTime` = now()
		where code=#{code};
	</update>
	
	<!--2012-07-11 by liusan.dyf
	当把from节点移动到to节点，首先，from的code要先附加to的code，然后再加上自己的（from）后#{leveledLength}位。
	from的parentpath，其实就是舍弃掉更新了的code的最后leveledLength位
	
	reservedString先不动
	-->
	<update id="move"  parameterType="hashmap">
		UPDATE `${reservedValue}` SET `code` = CONCAT(#{to}, SUBSTRING(`code`,LENGTH(#{from})-#{leveledLength} + 1)) ,
		`parentPath` =  CONCAT(#{to}, SUBSTRING(`code`,0,LENGTH(#{from})-#{leveledLength} + 1- #{leveledLength}))  
		WHERE `code` LIKE CONCAT(#{from},'%');
	</update>

	<select id="getOne" resultType="Catalog" parameterType="hashmap">
		SELECT * FROM `${reservedValue}` where code = #{code} ;
	</select>
	
	<!--2012-03-08 判断同级目录是否有重复的-->
	<select id="checkUniquenessOfTheSiblingTitle" resultType="int" parameterType="hashmap">
		SELECT count(0) FROM `${reservedValue}` where

			<if test="parentCode != null">
					code like CONCAT(#{parentCode},'%') and
			</if>
			
			<if test="exCode != null">
               	 	code != #{exCode} and
			</if>
		
		 `level`=#{level} and title = #{title};
	</select>
	
	<!--2012-07-31 by liusan.dyf-->
	<sql id="sql_getList"> 
        SELECT * FROM `${reservedValue}` where 1=1
			<if test="code != null">
					and code like CONCAT(#{code},'%')
			</if>
			<if test="level > 0">
					and  `level` = #{level}
			</if>
			
			<!--2013-03-05 by liusan.dyf SELECT ',a212,-444a,' REGEXP ',(a2|4d|-444a|5),'-->
			<if test="authorizationCode != null">
				and `authorizationCode` REGEXP CONCAT(',(',#{authorizationCode},'),')
			</if>
    </sql>

	<!--2012-06-11修改了排序规则-->
	<select id="getList" resultType="Catalog" parameterType="hashmap">
		<include refid="sql_getList"/>
		order by `parentPath`,`sortNumber`;
	</select>
	
	<!--2012-07-31 by liusan.dyf，按照最后更新时间排序-->
	<select id="getList_order_by_update_time" resultType="Catalog" parameterType="hashmap">
		<include refid="sql_getList"/>
		order by `lastUpdateTime`;
	</select>
	
</mapper>
